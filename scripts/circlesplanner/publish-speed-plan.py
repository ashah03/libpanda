#! /usr/bin/env python3

#import scipy.interpolate as spi
import sys

def getGPSLocation(filename):
    """Returns lat,long as a pair. If fix is not A, then return None"""
    file = open('/etc/libpanda.d/latest_gps')
    gpsstring = file.read()
    lat = None
    long = None
    vals = gpsstring.split(',')
    if vals[-1] == 'A': 
        lat = vals[2]
        long = vals[3]
    return lat,long

# find the prev/next values over which to interpolate
def getFix(xprofile, x_pos):
    lowerIndex=0
    for i,x_i in enumerate(xprofile):
        if x_i < x_pos:
            lowerIndex = i
            # TODO: optimize later w stop condition
    return lowerIndex

# thank you to the 1nt3rn3t
def interpolation(d, x):
    output = d[0][1] + (x - d[0][0]) * ((d[1][1] - d[0][1])/(d[1][0] - d[0][0]))
    return output

def get_target_by_position(profile, x_pos, dtype=float):
    """Get target speed by position."""
    prop_speed = 4.2
    if dtype == bool:
        kind = "previous"
    else:
        kind = "linear"
    #interp = spi.interp1d(profile[0] - vehicle.time_offset * prop_speed, profile[1],
    #                      kind=kind, fill_value="extrapolate")
    #return interp(vehicle.pos)
    # HACK fix this with real interpolation function
    print('size of profile[0]=',len(profile[0]))
    index = getFix(profile[0], x_pos)
    print('index result is ', index)
    if index >= len(profile[0])-1:
        return profile[1][-1]
    elif index <= 0:
        return profile[1][0]
    else:
        interArray = [ [ profile[0][index], profile[1][index]] , [ profile[0][index+1], profile[1][index+1] ] ]
    result = interpolation(interArray, x_pos)
    return result

def main( x_pos_example = 35.0 ):
    test_array = {"generated_at": 1664416382, "position": [0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0, 110.0, 120.0, 130.0, 140.0, 150.0, 160.0, 170.0, 180.0, 190.0, 200.0, 210.0, 220.0, 230.0, 240.0, 250.0, 260.0, 270.0, 280.0, 290.0, 300.0, 310.0, 320.0, 330.0, 340.0, 350.0, 360.0, 370.0, 380.0, 390.0, 400.0, 410.0, 420.0, 430.0, 440.0, 450.0, 460.0, 470.0, 480.0, 490.0, 500.0, 510.0, 520.0, 530.0, 540.0, 550.0, 560.0, 570.0, 580.0, 590.0, 600.0, 610.0, 620.0, 630.0, 640.0, 650.0, 660.0, 670.0, 680.0, 690.0, 700.0, 710.0, 720.0, 730.0, 740.0, 750.0, 760.0, 770.0, 780.0, 790.0, 800.0, 810.0, 820.0, 830.0, 840.0, 850.0, 860.0, 870.0, 880.0, 890.0, 900.0, 910.0, 920.0, 930.0, 940.0, 950.0, 960.0, 970.0, 980.0, 990.0, 1000.0, 1010.0, 1020.0, 1030.0, 1040.0, 1050.0, 1060.0, 1070.0, 1080.0, 1090.0, 1100.0, 1110.0, 1120.0, 1130.0, 1140.0, 1150.0, 1160.0, 1170.0, 1180.0, 1190.0, 1200.0, 1210.0, 1220.0, 1230.0, 1240.0, 1250.0, 1260.0, 1270.0, 1280.0, 1290.0, 1300.0, 1310.0, 1320.0, 1330.0, 1340.0, 1350.0, 1360.0, 1370.0, 1380.0, 1390.0, 1400.0, 1410.0, 1420.0, 1430.0, 1440.0, 1450.0, 1460.0, 1470.0, 1480.0, 1490.0, 1500.0, 1510.0, 1520.0, 1530.0, 1540.0, 1550.0, 1560.0, 1570.0, 1580.0, 1590.0, 1600.0, 1610.0, 1620.0, 1630.0, 1640.0, 1650.0, 1660.0, 1670.0, 1680.0, 1690.0, 1700.0, 1710.0, 1720.0, 1730.0, 1740.0, 1750.0, 1760.0, 1770.0, 1780.0, 1790.0, 1800.0, 1810.0, 1820.0, 1830.0, 1840.0, 1850.0, 1860.0, 1870.0, 1880.0, 1890.0, 1900.0, 1910.0, 1920.0, 1930.0, 1940.0, 1950.0, 1960.0, 1970.0, 1980.0, 1990.0, 2000.0], "speed": [26.013571189390422, 28.918344201987676, 10.007964280558115, 28.728488523081513, 0.6556925497880867, 14.582484696215182, 31.059501673576516, 30.43479482902138, 31.612929433395973, 13.119646466964438, 25.1523338406665, 26.564397212714674, 7.364440654539265, 1.4181668151790032, 24.989803134932743, 32.13811295237587, 15.267391619944057, 21.845325661257434, 22.220208109477422, 12.817411803909083, 33.42486917933416, 32.60147147719069, 25.28631236252185, 19.43139803585863, 26.58493141379802, 10.09331173118548, 3.564176063403119, 34.626231996940604, 31.484795418846492, 4.945266527737333, 33.125446094629986, 21.29151815758024, 33.22293793157487, 1.64920413225764, 33.09370173083156, 25.2637281473347, 20.2279610058861, 15.824939996388915, 16.136840356597805, 23.061522183612702, 34.815596369553134, 17.50145723255427, 6.014963774742044, 11.80588388182814, 0.42627323977495635, 1.9830079589312115, 25.465901889969825, 0.6932516657387744, 34.29178121833133, 4.340696328306702, 7.3666048707584455, 20.13895417875952, 11.369434938411976, 8.989031693533803, 10.19734280143916, 7.912861306216341, 27.4467653239699, 28.51783123352378, 34.70143382268159, 27.01902364956592, 22.00771054613629, 6.6856990536613585, 15.85753758502719, 33.340564946840544, 8.60005969958741, 21.586509788161088, 5.5663136846402255, 14.919267127156768, 30.312992989603547, 27.269378805326657, 13.639476286961992, 34.315672642972146, 3.751693987974407, 19.197343567923834, 31.70960334393058, 5.7260363842791175, 2.739644908425904, 12.938387738057198, 12.054861925201294, 16.92192993427522, 34.639737867386565, 25.72010505924789, 11.565287844964134, 11.691552007418053, 16.138055015503316, 28.320325861942962, 5.104249330163613, 19.924184245765392, 27.225269566856408, 0.8135609884397815, 14.67889374281199, 31.682443919824113, 6.869556774111072, 31.493916863041747, 14.328179661375668, 13.859811984691861, 18.25733016449418, 3.1990193746726323, 33.76812209831335, 22.028202592749796, 26.171681562647606, 28.623254835149275, 32.96065852072572, 4.498567728314541, 10.951355223355016, 0.7256820366106875, 11.49957612058793, 16.77078848902914, 5.852892541078425, 3.1534006543569997, 11.259744356886179, 13.391313428754994, 7.977311885948749, 6.597626793825447, 18.08785272606579, 29.227684205029064, 20.45517780550084, 0.6147912807789213, 17.261641311577847, 23.73332242244352, 11.961088017357024, 7.742717341934071, 17.30826472708606, 34.19647534793111, 19.927784466613772, 8.298681156663148, 26.419808629293428, 10.76162100049557, 8.476625828377639, 21.56305229713228, 24.567252389567976, 33.913170973750844, 25.789248315593, 26.414793328769925, 15.671295115350834, 23.98993715383684, 9.33511182811252, 28.908928348693976, 27.656565881540576, 1.5572804654329842, 27.797048858992866, 17.065033034068037, 9.302469969727131, 29.532922120370316, 13.809961545398286, 20.248886394822435, 25.37906059302908, 22.85867263747529, 1.4128208577438561, 25.577608143162827, 26.132721281454785, 23.915909900679083, 6.6914308329342695, 31.924700491545085, 4.988542322189561, 14.508546842205146, 0.9185056741077113, 4.110842346043543, 20.601389813473492, 24.69298123271745, 19.54932740550534, 16.450315440518345, 27.021567997926507, 17.34125028783179, 28.869508157777272, 1.839468108167916, 34.29624830517826, 7.015341190263899, 16.678810897382764, 34.34008571800271, 32.13288276245545, 0.4798697524247536, 32.7159470209619, 3.0250245707905425, 18.15044738197961, 34.17721414857582, 7.753941839470337, 5.802755827534438, 22.263070291022, 1.9467157905375836, 26.908657268478727, 29.71282554871004, 24.115434485297737, 19.448267359120194, 4.139322820664138, 25.59089474159012, 21.98683801735925, 1.100465671116314, 31.931557860884293, 33.449856954529835, 11.049837609373315, 18.759298212010624, 4.039592999608586, 22.853238249008257, 15.804104348767618, 11.798541234864773, 1.0159774534735004, 26.282361223583795, 30.395755251873393, 29.462209242311225, 34.41005722138511], "open_gap": [0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0]}
    profile_0 = test_array['position']
    profile_1 = test_array['speed']
    result = get_target_by_position( [ profile_0, profile_1 ], x_pos_example )
    print('Interpolate ',x_pos_example, ' is ', result)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        main(float(sys.argv[1]))
        lat, long = getGPSLocation('file')
        print('lat,long=', lat, long)
    else:
    	main()
