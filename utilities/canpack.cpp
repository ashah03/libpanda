#include <unistd.h>
#include <cstring>
#include "panda.h"

class CanPrint : public Panda::CanListener {
public:
	CanPrint() {};
	void newDataNotification(Panda::CanFrame* frame) {
		printf("New CAN read: %d.%06d,", (unsigned int)frame->sysTime.tv_sec, (int)frame->sysTime.tv_usec);

		printf("%d,%d,", (int)frame->bus, frame->messageID);

		for (int i =0; i < frame->dataLength; i++) {
			printf("%02x", frame->data[i]);
		}
		printf(",%d\n", frame->dataLength);
		
	}
};


char buffer1[] = {0x00, 0xF0, 0xA0, 0x09, 0x00, 0x00, 0x00, 0x01, 0x2A, 0x08, 0x85, 0x30, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x40, 0x00, 0x00, 0xB8, 0x07, 0x59, 0x30, 0x80, 0x55, 0x80, 0x00, 0x00, 0x00, 0x01, 0x10, 0x06, 0x2D, 0x3F, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0xB9, 0x07, 0x17, 0x38, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xF1, 0xB3, 0x2B, 0x01, 0xC0, 0xD1, 0xA9, 0x3C, 0x3C, 0xDB, 0xC0, 0x78, 0x09, 0x00, 0x00, 0x00, 0x01, 0x2F, 0x07, 0xC4, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xB4, 0x92, 0x65, 0x7A, 0x8D, 0x13, 0x08, 0x6C, 0x5F, 0xC0, 0x40, 0x05, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x07, 0xFD, 0xE0, 0x2A, 0x5E, 0xA0, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x64, 0xB5, 0xF5, 0x75, 0x59, 0x50, 0x7F, 0x35, 0x72, 0x02, 0xAF, 0xB0, 0xB0, 0x10, 0x00, 0x00, 0x00, 0x02, 0x16, 0x04, 0x12, 0x98, 0x20, 0x00, 0x00, 0x00, 0x64, 0xB3, 0xC1, 0x9D, 0x9B, 0x92, 0x47, 0x4D, 0x6D, 0x33};






int main(int argc, char **argv) {
	std::cout << "Starting " << argv[0] << std::endl;

	Panda::Can testCan;
	CanPrint mCanPrint;
	testCan.addObserver(&mCanPrint);
	
	testCan.startParsing();
	
	testCan.notificationCanRead(buffer1, sizeof(buffer1));
	
	
	unsigned char testPack[256];
	Panda::CanFrame frame;
	frame.messageID = 420;
	frame.bus = 2;
	frame.dataLength = 64;
	memset(frame.data, 0, 64);
	frame.data[0] = 69;
	
	
	std::cout << "Building a custom message:" << std::endl;
	int length = Panda::canFrameToBuffer(frame, testPack);
	
	for	(int i = 0; i < length; i++) {
		if ( i % 16 == 0) {
			printf("\n");
		}
		printf("0x%02X ", testPack[i]);
	}
	printf("\n");
	

	std::cout << "Done." << std::endl;
	
	std::cout << "\nSending it through the parser:" << std::endl;
	testCan.notificationCanRead((char*)testPack, length);
	
	
	
	frame.messageID = 1000;
	frame.bus = 1;
	frame.dataLength = 8;
	memset(frame.data, 0, 64);
	frame.data[0] = 0;
	frame.data[1] = 1;
	frame.data[2] = 2;
	frame.data[3] = 3;
	frame.data[4] = 4;
	frame.data[5] = 5;
	frame.data[6] = 6;
	frame.data[7] = 7;
	
	
	std::cout << "Building a custom message:" << std::endl;
	length = Panda::canFrameToBuffer(frame, testPack);
	
	for	(int i = 0; i < length; i++) {
		if ( i % 16 == 0) {
			printf("\n");
		}
		printf("0x%02X ", testPack[i]);
	}
	printf("\n");
	

	std::cout << "Done." << std::endl;
	
	std::cout << "\nSending it through the parser:" << std::endl;
	testCan.notificationCanRead((char*)testPack, length);
	

	return 0;
}
